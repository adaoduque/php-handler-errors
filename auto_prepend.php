<?php

register_shutdown_function('fatal_error');
set_error_handler( "log_error" );
set_exception_handler( "log_exception" );


#E_ERROR               (integer)	Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.	 
#E_WARNING             (integer)	Run-time warnings (non-fatal errors). Execution of the script is not halted.	 
#E_PARSE               (integer)	Compile-time parse errors. Parse errors should only be generated by the parser.	 
#E_NOTICE              (integer)	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.	 
#E_CORE_ERROR          (integer)	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.	 
#E_CORE_WARNING        (integer)	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.	 
#E_COMPILE_ERROR       (integer)	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.	 
#E_COMPILE_WARNING     (integer)	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.	 
#E_USER_ERROR          (integer)	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().	 
#E_USER_WARNING        (integer)	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().	 
#E_USER_NOTICE         (integer)	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().	 
#E_STRICT              (integer)	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.	Since PHP 5 but not included in E_ALL until PHP 5.4.0
#E_RECOVERABLE_ERROR   (integer)	Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.	Since PHP 5.2.0
#E_DEPRECATED          (integer)	Run-time notices. Enable this to receive warnings about code that will not work in future versions.	Since PHP 5.3.0
#E_USER_DEPRECATED     (integer)	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().	Since PHP 5.3.0
#E_ALL                 (integer)	All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.

function log_error( $num, $str, $file, $line, $context = null ) {
	$errors  =  array(
		0     => 'EXCEPTION', //Custom
		1	  => 'E_ERROR',
		2	  => 'E_WARNING',
		4	  => 'E_PARSE',
		8	  => 'E_NOTICE',
		16	  => 'E_CORE_ERROR',
		32	  => 'E_CORE_WARNING',
		64	  => 'E_COMPILE_ERROR',
		128	  => 'E_COMPILE_WARNING',
		256	  => 'E_USER_ERROR',
		512	  => 'E_USER_WARNING',
		1024  => 'E_USER_NOTICE',
		2048  => 'E_STRICT',
		4096  => 'E_RECOVERABLE_ERROR',
		8192  => 'E_DEPRECATED',
		16384 => 'E_USER_DEPRECATED',
		32767 => 'E_ALL'
	);	
	$fp = fopen('teste.csv', 'wb');
	fputcsv($fp, array( $errors[$num], $str, $file, $line, $_SESSION["teste"]));
	fclose($fp);
}

function log_exception( $e ) {
	log_error( 0, $e->getMessage(), $e->getFile(), $e->getLine());
}

function fatal_error() { 
    if(is_null($e = error_get_last()) === false) {
	   	log_error( $e["type"], $e["message"], $e["file"], $e["line"] );
    }
}